.chapter(data-title='Automated surveys with Twilio, TwiML and Django')
  .step(data-file='automated_survey/urls.py')
    :markdown
      ## What does the application do?

      This [Django 1.8](https://www.djangoproject.com/) sample
      application demonstrates using Twilio and
      [TwiML](https://www.twilio.com/docs/api/twiml) to deliver a
      survey that can be completed via voice call. The survey
      actually works via SMS text messages, too, but we're going to
      focus on the looping logic necessary to conduct an interview
      over the phone. In this tutorial, we'll highlight the code
      that interacts with Twilio and in turn makes the application
      tick. To run this sample app yourself, [download the code and
      follow the instructions on
      GitHub](https://github.com/TwilioDevEd/automated-survey-django). Let's
      get started! Click the right arrow above to move to the next
      step of the tutorial.

      ---

      **See also**

      * [Get started with Django](https://www.djangoproject.com/start/)
      * [Django API reference](https://docs.djangoproject.com/en/1.8/ref/)
      * [TwiML Python Quickstart Tutorial](https://www.twilio.com/docs/quickstart/python/twiml)
      * [Twilio Python Helper Library](https://twilio-python.readthedocs.org/en/latest/)

  .step(data-file='.env.example')
    :markdown
      ## Configure the application

      The application only requires a database to store the results
      of surveys. Rename `.env.example` to `.env` and customize to
      match your needs. You can find more details on how to setup
      the application in the [README
      file](https://github.com/TwilioDevEd/automated-survey-django/blob/master/README.md). Now
      that we have configured a database it’s time to load some
      survey data in it. All configuration is stored in the
      environment.

      ---

      **See Also:**
      * [Django-environ documentation](https://django-environ.readthedocs.org/en/latest/)
      * [Django settings documentation](https://docs.djangoproject.com/en/1.8/topics/settings/)

  .step(data-file='automated_survey/management/commands/load_survey.py',
    data-highlight='8-20')
    :markdown
      ## Create a survey

      If we want to conduct automated surveys we will first need
      some questions. For your convenience, the application’s
      repository includes a [sample
      survey](https://github.com/TwilioDevEd/automated-survey-django/blob/master/bear_survey.json)
      you can load through `manage.py` using the also included
      `load_survey` command. You can of course write your own survey
      following the same format.

      We want users to take our survey, so next we’re going to
      implement the webhooks Twilio will call when it receives a
      call.

      ---

      **See Also:**
      *  [Django custom management commands](https://docs.djangoproject.com/en/1.8/howto/custom-management-commands/)
      *  [Django models](https://docs.djangoproject.com/en/1.8/topics/db/models/)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='43-48')
    :markdown
      ## Respond to a Phone Call

      Whenever one of [your Twilio phone
      numbers](https://www.twilio.com/user/account/phone-numbers/incoming)
      receives a call, Twilio will make an HTTP request to the voice
      URL configured under it.

      For this application Twilio should be configured to request
      the application's `/first_survey/` endpoint. Since our app only
      handles one survey, the endpoint will reply with a redirect to
      the location of the first survey it finds. The URL for this
      survey should look something like `/survey/<some_id>`. [Twilio
      is a well-behaved HTTP
      client](https://www.twilio.com/docs/api/twiml/your_response)
      and will follow the redirect and thus make another
      request. Next we will handle the request made after the
      redirect.

      Next we will handle the request made after the redirect.

      ---

      **See Also:**
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [Redirect with Django](https://docs.djangoproject.com/en/1.8/ref/request-response/#django.http.HttpResponseRedirect)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='24-40')
    :markdown
      ## Welcome the caller to the survey

      Before we get started we want to welcome the user to our survey
      system using the
      [`<Say>`](https://www.twilio.com/docs/api/twiml/say) verb. After
      serving the welcome message, we will redirect Twilio to the
      first question using the
      [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect)
      verb. The contents of the latter tag must be the URL of the
      first question in the survey.

      Now the caller is about to listen to the first question

      ---

      **See Also:**
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Redirect>](https://www.twilio.com/docs/api/twiml/redirect)

  .step(data-file='automated_survey/views/questions.py', data-highlight='10-26')
    :markdown
      ## Ask the caller a question

      Asking the question is pretty straightforward, but we also
      need to record the response.

      Recording the answer is slightly more involved. If the
      question is of kind "voice" then we use the
      [`<Record>`](https://www.twilio.com/docs/api/twiml/record)
      verb. However, if we expect dialpad input we use the the
      [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather)
      verb. Both verbs take an `action` attribute and a `method`
      attribute. Twilio's client will use both attributes to make a
      request we can use to store the caller's answer to the
      question.

      The `action` URL will be
      `/question/<question_id>/question_response` for both TwiML
      verbs. We also include a `?Kind=<question kind>` URL parameter
      so we can identify the question kind before we store it in the
      database. This is the application endpoint that should store
      the response to a question

      Now that the caller has answered our question we want to store
      her answer.'

      ---

      **See Also:**
      * [TwiML Voice: <Gather>](https://www.twilio.com/docs/api/twiml/gather)
      * [TwiML Voice: <Record>](https://www.twilio.com/docs/api/twiml/record)

  .step(data-file='automated_survey/views/question_responses.py' data-highlight='14-23')
    :markdown
      ## Store a question's answer

      When the caller has finished entering her response, Twilio will make a
      request to this controller including all the [call
      parameters](https://www.twilio.com/docs/api/twiml/twilio_request) we
      will need . For this sample application we will store the
      `RecordingUrl` or `Digits` parameter for voice and yes-no/numeric
      answers accordingly. For this sample we will also save the `CallSid`
      so we can uniquely identify a call.

      Most surveys include more than a single question so we must now
      redirect the user to the next question in this survey.

  .step(data-file='automated_survey/views/question_responses.py' data-highlight='35-48')
    :markdown
      ## Redirect the user to the next question

      Now we need to locate the next question. This is rather
      straightfoward since we have the same request as in the previous
      step therefore we have access to the same information. We merely need
      to find the question after the current one and reply with a
      redirect with the next question's URL as the target.

      However, we need to handle the case where there's no next
      question. In this case we simply say "good-bye" and hangup.

      The application's users might want to see the answers to their
      survey so we're implementing that next.

      ---

      **See Also:** 
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Hangup>](https://www.twilio.com/docs/api/twiml/hangup)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='9-21')
    :markdown
      ## Display survey results

      Now we want a page where the survey’s author can see the
      responses to the survey.

      For this route we simply query the database through an ORM query
      and then display the information within a Django template. We
      display a panel for every individual call. It's worth mentioning
      we also redirect the application's root route to this route.

      ---

      **See Also:**
      * [Django queries](https://docs.djangoproject.com/en/1.8/topics/db/queries/)
      * [Django queries that span relationships](https://docs.djangoproject.com/en/1.8/topics/db/queries/#lookups-that-span-relationships)
      * [Django templates](https://docs.djangoproject.com/en/1.8/topics/templates/)

  .step
    :markdown
      ## Where to next?
      It's done! If you have configured one of your voice-enable Twilio
      numbers to the application built in this tutorial you should be able
      to take the survey and see the results under root route of the
      application. We hope you found this sample application useful. If
      you're a Python developer working with Twilio, you might enjoy these
      other tutorials:

      [Appointment
      reminders](https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/python/django):
      Learn to implement appointment reminders in your web app with
      Twilio. Appointment reminders allow you to automate the process of
      reaching out to your customers in advance of an upcoming appointment.

      [Two factor authentication with
      Flask](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/python/flask):
      earn to implement two-factor authentication (2FA) in your web app with
      Twilio-powered Authy. 2FA helps further secure your users' data by
      validating more than just a password. ''

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you
      think.
