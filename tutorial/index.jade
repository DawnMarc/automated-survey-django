.chapter(data-title='Automated Survey')
  .step(data-file='automated_survey/models.py')
    :markdown
      ## What does this thing do?

      This [Django](https://www.djangoproject.com/) web application
      shows how you can use Twilio to conduct a survey over a phone call.

      In this tutorial, we'll point out the key bits of code that make this
      application work. [Check out the project README on GitHub](https://github.com/TwilioDevEd/automated-survey-django)
      to see how to run the code yourself.

      Let's get started! Click the right arrow above to move to the next
      step of the tutorial.

      ---

      **See also**

      * [Twilio Python Helper Library](https://twilio-python.readthedocs.org/en/latest/)
      * [TwiML Python Quickstart Tutorial](https://www.twilio.com/docs/quickstart/python/twiml)
      * [Django docs](https://docs.djangoproject.com/en/1.8/ref/)

  .step(data-file='automated_survey/models.py', data-highlight='1-27')
    :markdown
      ## The Survey and Question models

      Our `Survey` and `Question` models store the content of the surveys our
      users will hear when they call our Twilio number. A survey can have
      multiple questions, and we support three different kinds of responses:

      - `VOICE`: Records an audio response from the caller
      - `YES_NO`: Uses the 1 key for 'yes' or the 0 key for 'no'
      - `NUMERIC`: Uses a 1-10 rating scale

      Our application comes with a sample survey for you to try about
      [bears, beets, and Battlestar Galactica](https://www.youtube.com/watch?v=WaaANll8h18).

      ---

      **See also**

      * [Django models](https://docs.djangoproject.com/en/1.8/topics/db/models/)
      * [Django choices model attribute](https://docs.djangoproject.com/en/1.8/ref/models/fields/#choices)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='45-50')
    :markdown
      ## Respond to a Phone Call

      Whenever someone calls our Twilio number, Twilio will send a POST request
      to the URL you configured when you bought that number. For this app, that
      URL should be `/automated-survey/first-survey/`.

      Our app begins the call by finding the first `Survey` in our database
      and redirecting to a view that will begin the survey for our caller.
      Let's look at that view next.

      ---

      **See Also:**

      * [Twilio is a well-behaved HTTP client](https://www.twilio.com/docs/api/twiml/your_response)
      * [Django HttpResponseRedirect](https://docs.djangoproject.com/en/1.8/ref/request-response/#django.http.HttpResponseRedirect)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='24-42')
    :markdown
      ## Welcome the caller to the survey

      The way you tell Twilio how to respond to incoming phone calls is by
      using [TwiML](https://www.twilio.com/docs/api/twiml).

      Our first TwiML response welcomes the caller to the survey. We
      use the [`<Say>`](https://www.twilio.com/docs/api/twiml/say) verb to have
      Twilio read the caller our welcome message. The
      [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect) verb tells
      Twilio where to find the next TwiML instructions - in our case, a URL
      for the first question.

      ---

      **See Also:**

      * [Creating TwiML with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/twiml.html)
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)

  .step(data-file='automated_survey/views/questions.py', data-highlight='10-39')
    :markdown
      ## Ask the caller a question

      For each question in the survey, we build a TwiML response to tell Twilio
      how to ask the question.

      We use [`<Say>`](https://www.twilio.com/docs/api/twiml/say) again to read
      the question and some instructions for how the caller should answer. The
      last part of our TwiML depends on what kind of question we're asking,
      using either a [`<Record>`](https://www.twilio.com/docs/api/twiml/record)
      or [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather) verb.

      The `action` argument of those verbs is the URL in our application where
      we want to receive the caller's answer. Let's look at that view next.

  .step(data-file='automated_survey/views/question_responses.py' data-highlight='11-43')
    :markdown
      ## Store a caller's answer to a question

      When the caller finishes answering a question, Twilio will make a
      POST request to this view.

      In a helper method we create a new `QuestionResponse` object using the
      POST data of Twilio's request to store some data about the call.

      We use another helper method to set the `response` attribute on that
      object with the caller's answer to the question. Depending on the kind of
      question, we use the POST data's `Digits` or `RecordingUrl` key.

      ---

      **See also**

      * [TwiML Voice: Twilio's Request](https://www.twilio.com/docs/api/twiml/twilio_request)

  .step(data-file='automated_survey/views/question_responses.py' data-highlight='45-67')
    :markdown
      ## Redirect the user to the next question

      After we record the caller's response, we redirect Twilio to get TwiML for
      the next question.

      In a helper method, we use the Django ORM to get the set of questions for
      this survey and find the next one based on the current question's `id` field.

      Using these methods, our caller will progress through each question in
      the survey until they've answered them all. Then we wrap up the survey -
      let's look at that next.

      ---

      **See Also:** 

      * [Django related objects](https://docs.djangoproject.com/en/1.8/topics/db/queries/#related-objects)
      * [Django reverse](https://docs.djangoproject.com/en/1.8/ref/urlresolvers/#reverse)

  .step(data-file='automated_survey/views/question_responses.py' data-highlight='69-76')
    :markdown
      ## End the survey

      When we can't find another question for a caller to answer, we end the
      survey with this code.

      After thanking the caller for taking the survey, the `<Hangup>` TwiML verb
      ends the call.

      ---

      **See Also:**

      * [TwiML Voice: <Hangup>](https://www.twilio.com/docs/api/twiml/hangup)

  .step(data-file='automated_survey/views/surveys.py', data-highlight='10-21')
    :markdown
      ## Display survey results

      The last part of our application is a web interface for the survey author
      to review the responses.

      This view uses the Django ORM to get all the `QuestionResponse` objects
      for a survey and renders them in template. We use HTML5 `<audio>` tags to
      play recorded responses.

      ---

      **See Also:**

      * [Django queries](https://docs.djangoproject.com/en/1.8/topics/db/queries/)
      * [Django queries that span relationships](https://docs.djangoproject.com/en/1.8/topics/db/queries/#lookups-that-span-relationships)
      * [Django templates](https://docs.djangoproject.com/en/1.8/topics/templates/)

  .step
    :markdown
      ## Where to next?

      That's it! Our Django application can now administer surveys to people who
      call our Twilio number, and survey authors can view the results on the
      web.

      If you're a Python developer working with Twilio, you might also enjoy
      these tutorials:

      [**Click-To-Call (Flask)**](https://www.twilio.com/docs/howto/walkthrough/click-to-call/python/flask)

      Put a button on your web page that connects visitors to live support or
      sales people via telephone.

      [**Call Tracking (Django)**](https://www.twilio.com/docs/howto/walkthrough/call-tracking/python/django)

      Measure the effectiveness of different marketing campaigns. By assigning
      a unique phone number to different advertisements, you can track which
      ones have the best call rates and get some data about the callers
      themselves.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you
      think.
